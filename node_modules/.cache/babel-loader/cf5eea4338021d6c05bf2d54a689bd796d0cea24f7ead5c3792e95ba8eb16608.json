{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\questions\\\\src\\\\components\\\\Addition\\\\LevelSection.js\";\nimport React from 'react';\nimport experienceData from '../data/experiences.json';\n// Fungsi untuk menghitung level berdasarkan experience (exp)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLevelFromExp = exp => {\n  // Mengiterasi data experience untuk mencari level yang sesuai berdasarkan exp\n  for (let i = 0; i < experienceData.length; i++) {\n    // Jika exp lebih kecil dari nilai experience pada indeks saat ini\n    if (exp < experienceData[i].experience) {\n      // Kembalikan level pada data sebelumnya (jika ada), atau level 1 jika ini adalah exp pertama\n      return experienceData[i - 1] ? experienceData[i - 1].level : 1;\n    }\n  }\n  // Jika exp lebih besar dari pengalaman terakhir, maka return level tertinggi yang ada\n  return experienceData[experienceData.length - 1].level;\n};\nconst LevelSection = ({\n  level,\n  exp\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"mt-4 text-center\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"text-xl font-semibold\",\n    children: [\"Level Pemain: \", level]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    className: \"text-lg\",\n    children: [\"Exp Pemain: \", exp]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-2\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-2.5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-500 h-2.5 rounded-full\",\n        style: {\n          width: `${exp / 100 * 100}%` // Contoh jika max exp 1000\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this);\n_c = LevelSection;\nexport default LevelSection;\nvar _c;\n$RefreshReg$(_c, \"LevelSection\");","map":{"version":3,"names":["React","experienceData","jsxDEV","_jsxDEV","getLevelFromExp","exp","i","length","experience","level","LevelSection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","$RefreshReg$"],"sources":["E:/project/questions/src/components/Addition/LevelSection.js"],"sourcesContent":["import React from 'react';\r\nimport experienceData from '../data/experiences.json'; \r\n// Fungsi untuk menghitung level berdasarkan experience (exp)\r\nconst getLevelFromExp = (exp) => {\r\n  // Mengiterasi data experience untuk mencari level yang sesuai berdasarkan exp\r\n  for (let i = 0; i < experienceData.length; i++) {\r\n    // Jika exp lebih kecil dari nilai experience pada indeks saat ini\r\n    if (exp < experienceData[i].experience) {\r\n      // Kembalikan level pada data sebelumnya (jika ada), atau level 1 jika ini adalah exp pertama\r\n      return experienceData[i - 1] ? experienceData[i - 1].level : 1;\r\n    }\r\n  }\r\n  // Jika exp lebih besar dari pengalaman terakhir, maka return level tertinggi yang ada\r\n  return experienceData[experienceData.length - 1].level;\r\n};\r\nconst LevelSection = ({ level, exp }) => (\r\n  \r\n  <div className=\"mt-4 text-center\">\r\n    <h2 className=\"text-xl font-semibold\">Level Pemain: {level}</h2>\r\n    <h3 className=\"text-lg\">Exp Pemain: {exp}</h3>\r\n    {/* Progress Bar untuk Level Pemain */}\r\n    <div className=\"mt-2\">\r\n      <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n        <div\r\n          className=\"bg-green-500 h-2.5 rounded-full\"\r\n          style={{\r\n            width: `${(exp / 100) * 100}%`, // Contoh jika max exp 1000\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default LevelSection;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,0BAA0B;AACrD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAIC,GAAG,IAAK;EAC/B;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IAC9C;IACA,IAAID,GAAG,GAAGJ,cAAc,CAACK,CAAC,CAAC,CAACE,UAAU,EAAE;MACtC;MACA,OAAOP,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,CAACG,KAAK,GAAG,CAAC;IAChE;EACF;EACA;EACA,OAAOR,cAAc,CAACA,cAAc,CAACM,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK;AACxD,CAAC;AACD,MAAMC,YAAY,GAAGA,CAAC;EAAED,KAAK;EAAEJ;AAAI,CAAC,kBAElCF,OAAA;EAAKQ,SAAS,EAAC,kBAAkB;EAAAC,QAAA,gBAC/BT,OAAA;IAAIQ,SAAS,EAAC,uBAAuB;IAAAC,QAAA,GAAC,gBAAc,EAACH,KAAK;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eAChEb,OAAA;IAAIQ,SAAS,EAAC,SAAS;IAAAC,QAAA,GAAC,cAAY,EAACP,GAAG;EAAA;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,eAE9Cb,OAAA;IAAKQ,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBT,OAAA;MAAKQ,SAAS,EAAC,uCAAuC;MAAAC,QAAA,eACpDT,OAAA;QACEQ,SAAS,EAAC,iCAAiC;QAC3CM,KAAK,EAAE;UACLC,KAAK,EAAE,GAAIb,GAAG,GAAG,GAAG,GAAI,GAAG,GAAG,CAAE;QAClC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACH,CACN;AAACG,EAAA,GAjBIT,YAAY;AAmBlB,eAAeA,YAAY;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
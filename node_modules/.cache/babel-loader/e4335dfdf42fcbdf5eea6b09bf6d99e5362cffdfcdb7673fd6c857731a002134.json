{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\questions\\\\src\\\\components\\\\Addition\\\\LevelSection.js\";\nimport React from 'react';\nimport experienceData from '../../data/experiences.json'; // Mengimpor data level dan pengalaman dari file JSON\n\n// Fungsi untuk menghitung level berdasarkan pengalaman (exp)\n// Fungsi ini akan mencari level pemain berdasarkan nilai exp yang diberikan\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLevelFromExp = exp => {\n  for (let i = 0; i < experienceData.length; i++) {\n    if (exp < experienceData[i].experience) {\n      return experienceData[i - 1] ? experienceData[i - 1].level : 1;\n    }\n  }\n  return experienceData[experienceData.length - 1].level;\n};\nconst LevelSection = ({\n  level,\n  exp\n}) => {\n  // Mendapatkan level berdasarkan exp pemain menggunakan fungsi getLevelFromExp\n  const playerLevel = getLevelFromExp(exp);\n\n  // Menentukan batas bawah dan batas atas pengalaman untuk level saat ini\n  const currentLevelData = experienceData.find(data => data.level === playerLevel);\n  const nextLevelData = experienceData.find(data => data.level === playerLevel + 1);\n\n  // Jika level pemain saat ini adalah level terakhir (tidak ada level berikutnya),\n  // maka batas atas akan menggunakan exp level terakhir\n  const minExpForLevel = currentLevelData.experience;\n  const maxExpForNextLevel = nextLevelData ? nextLevelData.experience : currentLevelData.experience;\n\n  // Menghitung persentase progress bar berdasarkan pengalaman pemain\n  const progressBarWidth = (exp - minExpForLevel) / (maxExpForNextLevel - minExpForLevel) * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-4 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold\",\n      children: [\"Level Pemain: \", playerLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg\",\n      children: [\"Exp Pemain: \", exp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full bg-gray-200 rounded-full h-2.5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-green-500 h-2.5 rounded-full\",\n          style: {\n            // Menghitung lebar progress bar berdasarkan persentase exp pemain\n            width: `${progressBarWidth}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = LevelSection;\nexport default LevelSection;\nvar _c;\n$RefreshReg$(_c, \"LevelSection\");","map":{"version":3,"names":["React","experienceData","jsxDEV","_jsxDEV","getLevelFromExp","exp","i","length","experience","level","LevelSection","playerLevel","currentLevelData","find","data","nextLevelData","minExpForLevel","maxExpForNextLevel","progressBarWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","$RefreshReg$"],"sources":["E:/project/questions/src/components/Addition/LevelSection.js"],"sourcesContent":["import React from 'react';\r\nimport experienceData from '../../data/experiences.json'; // Mengimpor data level dan pengalaman dari file JSON\r\n\r\n// Fungsi untuk menghitung level berdasarkan pengalaman (exp)\r\n// Fungsi ini akan mencari level pemain berdasarkan nilai exp yang diberikan\r\nconst getLevelFromExp = (exp) => {\r\n  for (let i = 0; i < experienceData.length; i++) {\r\n    if (exp < experienceData[i].experience) {\r\n      return experienceData[i - 1] ? experienceData[i - 1].level : 1;\r\n    }\r\n  }\r\n  return experienceData[experienceData.length - 1].level;\r\n};\r\n\r\nconst LevelSection = ({ level, exp }) => {\r\n  // Mendapatkan level berdasarkan exp pemain menggunakan fungsi getLevelFromExp\r\n  const playerLevel = getLevelFromExp(exp);\r\n\r\n  // Menentukan batas bawah dan batas atas pengalaman untuk level saat ini\r\n  const currentLevelData = experienceData.find((data) => data.level === playerLevel);\r\n  const nextLevelData = experienceData.find((data) => data.level === playerLevel + 1);\r\n\r\n  // Jika level pemain saat ini adalah level terakhir (tidak ada level berikutnya),\r\n  // maka batas atas akan menggunakan exp level terakhir\r\n  const minExpForLevel = currentLevelData.experience;\r\n  const maxExpForNextLevel = nextLevelData ? nextLevelData.experience : currentLevelData.experience;\r\n\r\n  // Menghitung persentase progress bar berdasarkan pengalaman pemain\r\n  const progressBarWidth = ((exp - minExpForLevel) / (maxExpForNextLevel - minExpForLevel)) * 100;\r\n\r\n  return (\r\n    <div className=\"mt-4 text-center\">\r\n      {/* Menampilkan level pemain berdasarkan hasil dari fungsi getLevelFromExp */}\r\n      <h2 className=\"text-xl font-semibold\">Level Pemain: {playerLevel}</h2>\r\n      {/* Menampilkan pengalaman (exp) pemain saat ini */}\r\n      <h3 className=\"text-lg\">Exp Pemain: {exp}</h3>\r\n\r\n      {/* Progress Bar untuk Level Pemain */}\r\n      <div className=\"mt-2\">\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n          {/* Bar progress yang menunjukkan persentase pengalaman yang sudah dicapai */}\r\n          <div\r\n            className=\"bg-green-500 h-2.5 rounded-full\"\r\n            style={{\r\n              // Menghitung lebar progress bar berdasarkan persentase exp pemain\r\n              width: `${progressBarWidth}%`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LevelSection;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,6BAA6B,CAAC,CAAC;;AAE1D;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAIC,GAAG,IAAK;EAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IAC9C,IAAID,GAAG,GAAGJ,cAAc,CAACK,CAAC,CAAC,CAACE,UAAU,EAAE;MACtC,OAAOP,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,CAACG,KAAK,GAAG,CAAC;IAChE;EACF;EACA,OAAOR,cAAc,CAACA,cAAc,CAACM,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK;AACxD,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAED,KAAK;EAAEJ;AAAI,CAAC,KAAK;EACvC;EACA,MAAMM,WAAW,GAAGP,eAAe,CAACC,GAAG,CAAC;;EAExC;EACA,MAAMO,gBAAgB,GAAGX,cAAc,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACL,KAAK,KAAKE,WAAW,CAAC;EAClF,MAAMI,aAAa,GAAGd,cAAc,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACL,KAAK,KAAKE,WAAW,GAAG,CAAC,CAAC;;EAEnF;EACA;EACA,MAAMK,cAAc,GAAGJ,gBAAgB,CAACJ,UAAU;EAClD,MAAMS,kBAAkB,GAAGF,aAAa,GAAGA,aAAa,CAACP,UAAU,GAAGI,gBAAgB,CAACJ,UAAU;;EAEjG;EACA,MAAMU,gBAAgB,GAAI,CAACb,GAAG,GAAGW,cAAc,KAAKC,kBAAkB,GAAGD,cAAc,CAAC,GAAI,GAAG;EAE/F,oBACEb,OAAA;IAAKgB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAE/BjB,OAAA;MAAIgB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,GAAC,gBAAc,EAACT,WAAW;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEtErB,OAAA;MAAIgB,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,cAAY,EAACf,GAAG;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAG9CrB,OAAA;MAAKgB,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBjB,OAAA;QAAKgB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,eAEpDjB,OAAA;UACEgB,SAAS,EAAC,iCAAiC;UAC3CM,KAAK,EAAE;YACL;YACAC,KAAK,EAAE,GAAGR,gBAAgB;UAC5B;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,GAtCIjB,YAAY;AAwClB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}